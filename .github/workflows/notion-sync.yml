name: Notion Content Sync

on:
  # 手动触发
  workflow_dispatch:
  
  # 定时同步（每天上午9点）
  schedule:
    - cron: '0 9 * * *'
  
  # 推送时触发
  push:
    branches: [ main ]
    paths:
      - 'docs/notion-content.md'

jobs:
  sync-notion:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Sync Notion Content
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          # 创建同步脚本
          cat > sync-notion.js << 'EOF'
          import dotenv from 'dotenv';
          import fetch from 'node-fetch';
          import fs from 'fs';
          
          dotenv.config();
          
          const NOTION_TOKEN = process.env.NOTION_TOKEN;
          const DATABASE_ID = process.env.NOTION_DATABASE_ID;
          
          async function syncNotionContent() {
            try {
              console.log('🔄 开始同步Notion内容...');
              
              // 获取数据库信息
              const dbResponse = await fetch(`https://api.notion.com/v1/databases/${DATABASE_ID}`, {
                headers: {
                  'Authorization': NOTION_TOKEN,
                  'Content-Type': 'application/json',
                  'Notion-Version': '2022-06-28'
                }
              });
              
              if (!dbResponse.ok) {
                throw new Error(`数据库查询失败: ${dbResponse.statusText}`);
              }
              
              const dbData = await dbResponse.json();
              console.log(`📊 数据库标题: ${dbData.title[0]?.text?.content || 'Untitled'}`);
              
              // 获取文章列表
              const postsResponse = await fetch(`https://api.notion.com/v1/databases/${DATABASE_ID}/query`, {
                method: 'POST',
                headers: {
                  'Authorization': NOTION_TOKEN,
                  'Content-Type': 'application/json',
                  'Notion-Version': '2022-06-28'
                },
                body: JSON.stringify({
                  filter: {
                    property: 'Status',
                    select: {
                      equals: 'Published'
                    }
                  },
                  sorts: [
                    {
                      property: 'Created',
                      direction: 'descending'
                    }
                  ]
                })
              });
              
              if (!postsResponse.ok) {
                throw new Error(`文章查询失败: ${postsResponse.statusText}`);
              }
              
              const postsData = await postsResponse.json();
              console.log(`📝 找到 ${postsData.results.length} 篇已发布文章`);
              
              // 生成内容摘要
              const summary = {
                totalPosts: postsData.results.length,
                lastSync: new Date().toISOString(),
                posts: postsData.results.map(page => ({
                  id: page.id,
                  title: page.properties.Title?.title?.[0]?.text?.content || 'Untitled',
                  status: page.properties.Status?.select?.name || 'Unknown',
                  createdTime: page.created_time,
                  lastEditedTime: page.last_edited_time
                }))
              };
              
              // 保存同步信息
              fs.writeFileSync('docs/.vitepress/notion-sync.json', JSON.stringify(summary, null, 2));
              
              console.log('✅ Notion内容同步完成');
              
            } catch (error) {
              console.error('❌ 同步失败:', error.message);
              process.exit(1);
            }
          }
          
          syncNotionContent();
          EOF
          
          # 运行同步脚本
          node sync-notion.js
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "没有更改需要提交"
          else
            git add docs/.vitepress/notion-sync.json
            git commit -m "🔄 自动同步Notion内容 - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
          fi
      
      - name: Trigger Pages Build
        run: |
          echo "🚀 触发GitHub Pages重新构建"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pages/builds
